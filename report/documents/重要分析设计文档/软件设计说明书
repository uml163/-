#### 软件设计文档

### 1、设计

##1.1前端

#1.1.1前端技术选择
--

前端候选技术：APP、web与微信小程序

三种技术优缺点比较：
* APP
  * 优势：
    * 能提供最佳的用户体验
    * 可以节省带宽成本、以独立的程序运行
  * 劣势：
    * 平台移植比较麻烦
    * 维持多个版本成本过高
* WEB
  * 优势：
    * 轻量级应用
    * 无需安装额外应用
  * 劣势：
    * 浏览器、版本问题
    * web端的流畅度问题
    * 产品市场
* 微信小程序：
   * 优点：
     * 使用者角度：简单方便，不用额外安装app 、安全
     * 开发者角度：节省成本和降低了门槛难度
     * 微信本身的用户基础带来的流量优势、宣传更方便（转发分享）扫描二维码即可
     * 速度快、不占内存
   * 劣势：
     * 小程序文件限制、不适用于大型的小程序开发
     * 用户流失较快

我们的选择：

基于前面三种候选的比较，我们最终对客户端以及商家端进行了选型。
* 客户端

为便于顾客使用和轻量级开发、我们选择微信小程序作为客户端。
* 商家端

商家端对于产品的便利性需求并不是很高，而对产品功能、产品的稳定性有着较高的需求，因此我们选用WEb端作为商家端。

#1.1.2 框架选择


* 客户端：

微信小程序：不使用额外的框架、使用微信提供的小程序框架（WXML+WXSS+JS+JSON）进行开发。没有额外引入框架出现的潜在错误情况。
* 商家端：
  * JQuery + Bootstrap：使用bootstra框架提供的样式和组件快速的完成一个网站的前端页面，只需要引用一些定义好样式和组件（通过定义好的class来引用相应的样式和组件），就可以完成一个非常漂亮网页。
  * Angular：文档例子非常少, 验证功能错误信息显示比较薄弱，需要写很多模板标签
  * Vue：MVVM模式，组件化开发，通过setter与getter以及VDOM提供了较好的性能
  * React：React是目标是UI组件，通常可以和其它框架组合使用，目前并不适合单独做一个完整的框架

基于开发难度与前景、我们选用JQuery + Bootstrap进行单页面应用开发

#1.1.3后端技术选择

后端候选技术：java+ jesery、GO、Python + Flask等等

后端技术优缺点比较：
* java+ jesery
  * 优势：
    * Java SE 规范，这让 Java 即能像 C/C++ 一样贴近操作系统，又自由处理网络相关、IO 相关的内容，功能很强大。
    * Java EE 规范，完善的规范使得 Java 后端发展有了很好的规范基础。统一的环境、规范让框架和业务代码有了交互的标准。
   * 劣势：
     * 开发效率相对较低。
     * 虽然上手开发相对容易，但真正理解框架底层的运行原理相对较难，需要大量的学习和经验。
* GO
  * 优势：
    * Golang 的设计理念很明确，就是将动态类型语言的编程容易度和静态类型语言的安全效率结合起来。
    * 部署简单，Go 编译生成的可执行文件无需担心包和库的依赖关系。     * 并发性能好，即使是单个Go应用也能有效利用多个 CPU 核心。良好的语言设计，且自带完善的工具链。
  * 劣势：
    * import 的包不支持自定义版本，项目容易因为包的升级而不可用。
    * 垃圾回收机制仍存在一些问题。缺乏比较完善的框架。
* Python + Flask
  * 优势：
    * 学习简单，能快速进行开发构建 Web 应用。
    * 拥有丰富的标准库和第三方库。
    * 在WEB方面有多种成熟的框架。
  * 劣势：
    * 作为解释型语言，运行速度较慢，且无法有效利用多线程。
    
从团队技术栈来看、团队中了解程序开发的基本上只有架构师、架构师比较熟悉的开发语言为python。

从选型技术层来看，选型语言需要考虑可用框架、开发工具、设计模式、开发模式等方面。

从业务需求来看，由于个人申请的微信小程序不能获取paykey，所以我们的程序将不会进行市场投放，高可用的、轻量级是程序所需的。

基于以上三个因素的考量、最终我们选用Python + Flask最为后端编程语言。

##1.2架构设计

#1.2.1系统基本架构
* 小程序与商家端作为前端与用户交互
* 前端通过 API 与后端沟通
* Nginx 捕获 HTTPS 请求并进行均衡负载，反向代理到任一服务器实例
Flask服务器由多个实例，处理请求
* 使用 MySQL 作为数据库

